{
    "paper_id": "d3b7acb9fe50ac1eab4f9ca653d44642794a0204",
    "metadata": {
        "title": "Automatic Generation of DistAlgo Programs from Event-B Models",
        "authors": [
            {
                "first": "Alexis",
                "middle": [],
                "last": "Grall",
                "suffix": "",
                "affiliation": {
                    "laboratory": "LORIA UMR 7503",
                    "institution": "",
                    "location": {
                        "settlement": "Vandoeuvre-l\u00e8s-Nancy",
                        "country": "France"
                    }
                },
                "email": "alexis.grall@loria.fr"
            }
        ]
    },
    "abstract": [
        {
            "text": "The development of distributed algorithms offers challenges in verifying that they meet their specifications. The correct-by-construction approach consists in developing a model of the algorithm before transforming this model into a program. This transformation can introduce errors that were not present in the model. Our objective is to develop an automatic transformation of distributed algorithm Event-B [2] models into DistAlgo [7] programs. The Event-B language combines refinement techniques and state based modelling and is adapted to the verification of distributed systems [3, 12] . The DistAlgo language is a highlevel programming language for distributed algorithms. Its high-levelness makes DistAlgo closer to the mathematical notations of Event-B and improves the clarity of DistAlgo programs. A verified automatic transformation ensures that the properties proved in the model still hold in the program and facilitates the developing process.",
            "cite_spans": [
                {
                    "start": 583,
                    "end": 586,
                    "text": "[3,",
                    "ref_id": "BIBREF2"
                },
                {
                    "start": 587,
                    "end": 590,
                    "text": "12]",
                    "ref_id": "BIBREF10"
                }
            ],
            "ref_spans": [],
            "section": "Abstract"
        }
    ],
    "body_text": [
        {
            "text": "Code generation from Event-B models has been a subject of interest in the B community. The B0 [11] language defines constraints on classical B for code generation and an equivalence between B types and usual programming types such as arrays, integers etc. B0 can be translated to Ada, C, C++ using the Ate-lierB [4] tools. In Event-B, several plugins have been developed for the Rodin [10] software. The EB2ALL [8] framework provides a list of transformations of Event-B models into classical programming languages (C, C++, Java, . . . ) and this work can be considered as adding a new target programming language but with the target of a distributed program. Automatic generation of distributed programs was proposed in ViSiDiA [1, 9] together with Event-B with the plugin B2VISIDIA [12] relating the local Event-B model and a ViSiDiA program. A Tasking Event-B [6] plugin for Rodin extends the Event-B language to provide features for specifying concurrent multi-tasking systems. The plugin enables the decomposition of a model into several machines performing tasks and provides a tool support for translating a tasking specification into Ada code. However, a global state is preferable for verifying global properties on distributed algorithms. ",
            "cite_spans": [
                {
                    "start": 94,
                    "end": 98,
                    "text": "[11]",
                    "ref_id": "BIBREF9"
                },
                {
                    "start": 312,
                    "end": 315,
                    "text": "[4]",
                    "ref_id": "BIBREF3"
                },
                {
                    "start": 411,
                    "end": 414,
                    "text": "[8]",
                    "ref_id": "BIBREF7"
                },
                {
                    "start": 729,
                    "end": 732,
                    "text": "[1,",
                    "ref_id": "BIBREF0"
                },
                {
                    "start": 733,
                    "end": 735,
                    "text": "9]",
                    "ref_id": "BIBREF8"
                },
                {
                    "start": 784,
                    "end": 788,
                    "text": "[12]",
                    "ref_id": "BIBREF10"
                },
                {
                    "start": 863,
                    "end": 866,
                    "text": "[6]",
                    "ref_id": "BIBREF5"
                }
            ],
            "ref_spans": [],
            "section": "Related Works"
        },
        {
            "text": "The general methodology, presented in Fig. 1 , starts by stating the problem to solve by listing the requirements attached to the problem. One has then to specify the abstract Event-B machine AM translating the main requirements for the given problem. The process is progressing by a list of formal Event-B refined machines leading to a final concrete Event-B machine and context, CM and CM-CONTEXT. Finally, the translations of these final context and machine into DistAlgo components and programs are generated in two main steps: the automatic transformation of CM and CM-CONTEXT into a DistAlgo program and the possible tuning of the obtained DistAlgo components using some auxiliary configurations (e.g. the number of processes).",
            "cite_spans": [],
            "ref_spans": [
                {
                    "start": 38,
                    "end": 44,
                    "text": "Fig. 1",
                    "ref_id": "FIGREF0"
                }
            ],
            "section": "General Approach"
        },
        {
            "text": "The final pair of machine and context, CM and CM-CONTEXT are supposed to be specified in a language LB (Local Event-B) which restricts the Event-B language to models of distributed algorithms that are local, which means that the constants and variables are local to processes (they are associated to processes.) and that events only use local variables and constants of one process. Transformations of this LB model into a DistAlgo program are based on the extraction of information concerning the network and the process classes from the context CONTEXT-CM, and on the analysis of the localization of the different variables and events of the machine CM. Constants whose values are not defined in the context are instantiated during the configuration phase.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "General Approach"
        },
        {
            "text": "The LB language [5] defines a distributed algorithm in Event-B as a collection of processes with a specific local algorithm for each process. We derive the general architecture of the distributed algorithm from the context CONTEXT-CM which specifies the topology of the network, the processes, the local constants of the processes and the communication operations. We derive the local algorithms from the machine CM which specifies the local variables of the processes and the variable specifying the state of the channels. These variables define the global state of the distributed algorithm while the local state of a process is defined by the values of its local variables and the states of the channels involving this process. The transition relation between the local states of a process are then defined by the local events (of this process) in the machine CM. An additional variable pc in the machine helps specifying the flow of the algorithm and can be used for constructing control flow graphs describing the local algorithms.",
            "cite_spans": [
                {
                    "start": 16,
                    "end": 19,
                    "text": "[5]",
                    "ref_id": "BIBREF4"
                }
            ],
            "ref_spans": [],
            "section": "Development of the Transformation"
        },
        {
            "text": "The transformation rules add constraints on LB that are specific to DistAlgo and that ensure that the expressions used in the model can be translated into DistAlgo by specifying a correspondence between Event-B and DistAlgo types. The transformation into DistAlgo generates programs based on the local control flow graphs, therefore giving a tool to help understanding the program.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Development of the Transformation"
        },
        {
            "text": "Refined models of distributed algorithms have been manually and successfully transformed into DistAlgo programs following the given transformation rules. These models describe a simple communication between two processes, a simple communication algorithm between processes in a star network and the election in a connected acyclic network.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Development of the Transformation"
        },
        {
            "text": "We need to ensure that any safety property that was proved with invariants in an Event-B model still holds in the DistAlgo program obtained from the transformation of the model, i.e. the soundness of the transformation. We have already shown the soundness of the translation for an earlier version of LB, i.e. a program obtained by the transformation refines the machine it is obtained from. We have thus, that for any possible execution of the program, an equivalent behaviour can be observed for the model machine. However, the completeness of the transformation is not guaranteed when no restrictions are imposed on the corresponding programs.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Development of the Transformation"
        },
        {
            "text": "The implementation of the transformation as a Rodin plugin is currently a work in progress with so far encouraging results on simple cases. The proof of the soundness of the transformation remains to be completed and modified with respect to the current version of the transformation. Other future work includes the extension of LB to enable more possibilities in modelling, such as enabling the broadcast of messages, the use of user defined functions/libraries in the resulting programs or the addition of configurable timeout delays. Additional case studies of parallel computing are to be refined into LB and transformed. These case studies will be an occasion to compare the performance of the automatically generated program with an hand written version of this program. Long term future work includes the derivation of other transformations into other programming languages from the transformation to DistAlgo.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Future Work"
        }
    ],
    "bib_entries": {
        "BIBREF0": {
            "ref_id": "b0",
            "title": "Visidia: A java framework for designing, simulating, and visualizing distributed algorithms",
            "authors": [
                {
                    "first": "W",
                    "middle": [],
                    "last": "Abdou",
                    "suffix": ""
                },
                {
                    "first": "N",
                    "middle": [
                        "O"
                    ],
                    "last": "Abdallah",
                    "suffix": ""
                },
                {
                    "first": "M",
                    "middle": [],
                    "last": "Mosbah",
                    "suffix": ""
                }
            ],
            "year": 2014,
            "venue": "2014 IEEE/ACM 18th International Symposium on Distributed Simulation and Real Time Applications",
            "volume": "",
            "issn": "",
            "pages": "43--46",
            "other_ids": {}
        },
        "BIBREF1": {
            "ref_id": "b1",
            "title": "Modeling in Event-B: System and Software Engineering",
            "authors": [
                {
                    "first": "J",
                    "middle": [
                        "R"
                    ],
                    "last": "Abrial",
                    "suffix": ""
                }
            ],
            "year": 2010,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF2": {
            "ref_id": "b2",
            "title": "A mechanically proved and incremental development of IEEE 1394 tree identify protocol",
            "authors": [
                {
                    "first": "J",
                    "middle": [
                        "R"
                    ],
                    "last": "Abrial",
                    "suffix": ""
                },
                {
                    "first": "D",
                    "middle": [],
                    "last": "Cansell",
                    "suffix": ""
                },
                {
                    "first": "D",
                    "middle": [],
                    "last": "M\u00e9ry",
                    "suffix": ""
                }
            ],
            "year": 2003,
            "venue": "Formal Aspects Comput",
            "volume": "14",
            "issn": "3",
            "pages": "215--227",
            "other_ids": {}
        },
        "BIBREF3": {
            "ref_id": "b3",
            "title": "The Industrial Tool to Efficiently Deploy the B Method",
            "authors": [
                {
                    "first": "B",
                    "middle": [],
                    "last": "Atelier",
                    "suffix": ""
                }
            ],
            "year": null,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF4": {
            "ref_id": "b4",
            "title": "Generating Distributed Programs from Event-B Models",
            "authors": [
                {
                    "first": "H",
                    "middle": [],
                    "last": "Cirstea",
                    "suffix": ""
                },
                {
                    "first": "A",
                    "middle": [],
                    "last": "Grall",
                    "suffix": ""
                },
                {
                    "first": "D",
                    "middle": [],
                    "last": "M\u00e9ry",
                    "suffix": ""
                }
            ],
            "year": 2020,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF5": {
            "ref_id": "b5",
            "title": "Tasking Event-B: an extension to Event-B for generating concurrent code",
            "authors": [
                {
                    "first": "A",
                    "middle": [],
                    "last": "Edmunds",
                    "suffix": ""
                },
                {
                    "first": "M",
                    "middle": [],
                    "last": "Butler",
                    "suffix": ""
                }
            ],
            "year": 2011,
            "venue": "PLACES 2011",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF6": {
            "ref_id": "b6",
            "title": "From clarity to efficiency for distributed algorithms",
            "authors": [
                {
                    "first": "Y",
                    "middle": [
                        "A"
                    ],
                    "last": "Liu",
                    "suffix": ""
                },
                {
                    "first": "S",
                    "middle": [
                        "D"
                    ],
                    "last": "Stoller",
                    "suffix": ""
                },
                {
                    "first": "B",
                    "middle": [],
                    "last": "Lin",
                    "suffix": ""
                },
                {
                    "first": "M",
                    "middle": [],
                    "last": "Gorbovitski",
                    "suffix": ""
                }
            ],
            "year": 2012,
            "venue": "ACM SIGPLAN Notices",
            "volume": "47",
            "issn": "",
            "pages": "395--410",
            "other_ids": {}
        },
        "BIBREF7": {
            "ref_id": "b7",
            "title": "EB2C : A Tool for Event-B to C Conversion Support",
            "authors": [
                {
                    "first": "D",
                    "middle": [],
                    "last": "M\u00e9ry",
                    "suffix": ""
                },
                {
                    "first": "N",
                    "middle": [
                        "K"
                    ],
                    "last": "Singh",
                    "suffix": ""
                }
            ],
            "year": 2011,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF8": {
            "ref_id": "b8",
            "title": "Project RODIN: Rigorous open development environment for complex systems",
            "authors": [
                {
                    "first": "M",
                    "middle": [],
                    "last": "Mosbah",
                    "suffix": ""
                }
            ],
            "year": 2004,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF9": {
            "ref_id": "b9",
            "title": "Java card code generation from B specifications",
            "authors": [
                {
                    "first": "B",
                    "middle": [],
                    "last": "Tatibou\u00ebt",
                    "suffix": ""
                },
                {
                    "first": "A",
                    "middle": [],
                    "last": "Requet",
                    "suffix": ""
                },
                {
                    "first": "J.-C",
                    "middle": [],
                    "last": "Voisinet",
                    "suffix": ""
                },
                {
                    "first": "A",
                    "middle": [],
                    "last": "Hammad",
                    "suffix": ""
                }
            ],
            "year": 2003,
            "venue": "ICFEM 2003",
            "volume": "2885",
            "issn": "",
            "pages": "306--318",
            "other_ids": {
                "DOI": [
                    "10.1007/978-3-540-39893-6_18"
                ]
            }
        },
        "BIBREF10": {
            "ref_id": "b10",
            "title": "From event-b specifications to programs for distributed algorithms",
            "authors": [
                {
                    "first": "M",
                    "middle": [],
                    "last": "Tounsi",
                    "suffix": ""
                },
                {
                    "first": "M",
                    "middle": [],
                    "last": "Mosbah",
                    "suffix": ""
                },
                {
                    "first": "D",
                    "middle": [],
                    "last": "M\u00e9ry",
                    "suffix": ""
                }
            ],
            "year": 2016,
            "venue": "IJAACS",
            "volume": "9",
            "issn": "",
            "pages": "223--242",
            "other_ids": {
                "DOI": [
                    "10.1504/IJAACS.2016.079623"
                ]
            }
        }
    },
    "ref_entries": {
        "FIGREF0": {
            "text": "C1.da,C2.da, . . . , Cn.The global methodology for correct-by-construction distributed algorithms.",
            "latex": null,
            "type": "figure"
        }
    },
    "back_matter": []
}